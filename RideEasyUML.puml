@startuml RideEasy_Class_Diagram

!define DESIGN_PATTERN_COLOR #E1F5FE
!define CORE_CLASS_COLOR #F3E5F5
!define ENUM_COLOR #FFF3E0
!define STRUCT_COLOR #E8F5E8

title RideEasy - Ride Sharing Platform\nClass Diagram with Design Patterns

package "Core Data Structures" <<Rectangle>> {
    class Location <<STRUCT_COLOR>> {
        +double latitude
        +double longitude
        +string address
        +Location(lat, lng, addr)
    }
    
    class Vehicle <<STRUCT_COLOR>> {
        +string vehicleId
        +string model
        +string licensePlate
        +string vehicleType
        +int capacity
        +Vehicle(id, model, plate, type, cap)
    }
}

package "Enums and Types" <<Rectangle>> {
    enum RideType <<ENUM_COLOR>> {
        NORMAL
        CARPOOL
    }
    
    enum VehicleType <<ENUM_COLOR>> {
        BIKE
        SEDAN
        SUV
        AUTO_RICKSHAW
    }
    
    enum RideStatus <<ENUM_COLOR>> {
        REQUESTED
        DRIVER_ASSIGNED
        DRIVER_ENROUTE
        IN_PROGRESS
        COMPLETED
        CANCELLED
    }
    
    enum DriverStatus <<ENUM_COLOR>> {
        AVAILABLE
        ON_TRIP
        OFFLINE
    }
}

package "Factory Pattern" <<DESIGN_PATTERN_COLOR>> {
    class VehicleTypeFactory {
        +{static} string getVehicleTypeName(type)
        +{static} double getBaseFare(type)
        +{static} double getPerKmRate(type)
    }
}

package "User Management" <<Rectangle>> {
    abstract class User <<CORE_CLASS_COLOR>> {
        #string userId
        #string name
        #string phone
        +User(id, name, phone)
        +{abstract} ~User()
        +string getUserId()
        +string getName()
        +string getPhone()
    }
    
    class Rider <<CORE_CLASS_COLOR>> {
        -Location defaultPickupLocation
        -double rating
        +Rider(id, name, phone, location)
        +Location getDefaultPickupLocation()
        +double getRating()
        +void setRating(rating)
    }
    
    class Driver <<CORE_CLASS_COLOR>> {
        -Vehicle vehicle
        -Location currentLocation
        -DriverStatus status
        -double rating
        +Driver(id, name, phone, vehicle, location)
        +Vehicle getVehicle()
        +Location getCurrentLocation()
        +DriverStatus getStatus()
        +double getRating()
        +void setLocation(location)
        +void setStatus(status)
        +void setRating(rating)
    }
}

package "Ride Management" <<Rectangle>> {
    class Ride <<CORE_CLASS_COLOR>> {
        -string rideId
        -shared_ptr<Rider> rider
        -shared_ptr<Driver> driver
        -Location pickupLocation
        -Location dropoffLocation
        -RideType rideType
        -VehicleType requestedVehicleType
        -RideStatus status
        -double fare
        -double distance
        -chrono::time_point requestTime
        -chrono::time_point startTime
        -chrono::time_point endTime
        
        +Ride(id, rider, pickup, dropoff, type, vehicleType)
        +string getRideId()
        +shared_ptr<Rider> getRider()
        +shared_ptr<Driver> getDriver()
        +Location getPickupLocation()
        +Location getDropoffLocation()
        +RideType getRideType()
        +VehicleType getRequestedVehicleType()
        +RideStatus getStatus()
        +double getFare()
        +double getDistance()
        +void assignDriver(driver)
        +void setStatus(status)
        +void setFare(fare)
        +void setDistance(distance)
        +void setStartTime()
        +void setEndTime()
    }
}

package "Strategy Pattern - Driver Matching" <<DESIGN_PATTERN_COLOR>> {
    interface MatchingStrategy {
        +{abstract} shared_ptr<Driver> findBestDriver(drivers, location, vehicleType)
    }
    
    class NearestDriverStrategy {
        -double calculateDistance(loc1, loc2)
        +shared_ptr<Driver> findBestDriver(drivers, location, vehicleType)
    }
    
    class BestRatedDriverStrategy {
        +shared_ptr<Driver> findBestDriver(drivers, location, vehicleType)
    }
}

package "Decorator Pattern - Pricing" <<DESIGN_PATTERN_COLOR>> {
    interface PricingCalculator {
        +{abstract} double calculateFare(distance, vehicleType)
    }
    
    class BasePricingCalculator {
        +double calculateFare(distance, vehicleType)
    }
    
    abstract class PricingDecorator {
        #unique_ptr<PricingCalculator> baseCalculator
        +PricingDecorator(calculator)
    }
    
    class SurgePricingDecorator {
        -double surgeMultiplier
        +SurgePricingDecorator(calculator, multiplier)
        +double calculateFare(distance, vehicleType)
    }
    
    class DiscountDecorator {
        -double discountPercentage
        +DiscountDecorator(calculator, discount)
        +double calculateFare(distance, vehicleType)
    }
}

package "Observer Pattern - Notifications" <<DESIGN_PATTERN_COLOR>> {
    interface Observer {
        +{abstract} void update(event, message)
    }
    
    abstract class Subject {
        -vector<shared_ptr<Observer>> observers
        +void addObserver(observer)
        +void removeObserver(observer)
        +void notifyObservers(event, message)
    }
    
    class RiderNotificationService {
        -string riderId
        +RiderNotificationService(id)
        +void update(event, message)
    }
    
    class DriverNotificationService {
        -string driverId
        +DriverNotificationService(id)
        +void update(event, message)
    }
}

package "Singleton Pattern - Central Management" <<DESIGN_PATTERN_COLOR>> {
    class RideManager {
        -{static} unique_ptr<RideManager> instance
        -unordered_map<string, shared_ptr<Driver>> drivers
        -unordered_map<string, shared_ptr<Rider>> riders
        -unordered_map<string, shared_ptr<Ride>> rides
        -unique_ptr<MatchingStrategy> matchingStrategy
        -unique_ptr<PricingCalculator> pricingCalculator
        -int rideCounter
        
        -RideManager()
        -string generateRideId()
        -double calculateDistance(pickup, dropoff)
        
        +{static} RideManager& getInstance()
        +void registerRider(rider)
        +void registerDriver(driver)
        +void setMatchingStrategy(strategy)
        +void setPricingCalculator(calculator)
        +string requestRide(riderId, pickup, dropoff, rideType, vehicleType)
        +void updateRideStatus(rideId, status)
        +void completeRide(rideId)
        +shared_ptr<Ride> getRide(rideId)
        +vector<shared_ptr<Driver>> getAvailableDrivers()
    }
}

' Inheritance relationships
User <|-- Rider
User <|-- Driver
MatchingStrategy <|.. NearestDriverStrategy
MatchingStrategy <|.. BestRatedDriverStrategy
PricingCalculator <|.. BasePricingCalculator
PricingCalculator <|.. PricingDecorator
PricingDecorator <|-- SurgePricingDecorator
PricingDecorator <|-- DiscountDecorator
Observer <|.. RiderNotificationService
Observer <|.. DriverNotificationService
Subject <|-- RideManager

' Composition relationships
Rider *-- Location : defaultPickupLocation
Driver *-- Vehicle : vehicle
Driver *-- Location : currentLocation
Ride *-- Location : pickupLocation
Ride *-- Location : dropoffLocation
RideManager *-- MatchingStrategy : matchingStrategy
RideManager *-- PricingCalculator : pricingCalculator

' Association relationships
Ride --> Rider : rider
Ride --> Driver : driver
RideManager --> Driver : manages
RideManager --> Rider : manages
RideManager --> Ride : manages
PricingDecorator --> PricingCalculator : wraps

' Usage relationships
NearestDriverStrategy ..> VehicleTypeFactory : uses
BestRatedDriverStrategy ..> VehicleTypeFactory : uses
BasePricingCalculator ..> VehicleTypeFactory : uses
SurgePricingDecorator ..> PricingCalculator : decorates
DiscountDecorator ..> PricingCalculator : decorates

' Enum relationships
Ride --> RideType
Ride --> VehicleType
Ride --> RideStatus
Driver --> DriverStatus

' Notes for design patterns
note right of RideManager : Singleton Pattern\nEnsures single instance\nfor centralized management

note right of MatchingStrategy : Strategy Pattern\nPluggable driver\nmatching algorithms

note right of PricingCalculator : Decorator Pattern\nDynamic pricing\nbehavior modification

note right of Observer : Observer Pattern\nDecoupled notification\nsystem for events

note right of VehicleTypeFactory : Factory Pattern\nEncapsulates vehicle\ntype creation logic

' Legend
legend right
|= Pattern |= Purpose |
| <color:#FF6B6B>Singleton</color> | Single instance management |
| <color:#4ECDC4>Strategy</color> | Pluggable algorithms |
| <color:#45B7D1>Decorator</color> | Dynamic behavior extension |
| <color:#96CEB4>Observer</color> | Event notification system |
| <color:#FFEAA7>Factory</color> | Object creation encapsulation |
endlegend

@enduml
